import os
import sqlite3
from datetime import datetime
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from openai import OpenAI
import sys
import base64
import asyncio
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from mood_manager import MoodManager
from image_handler import ImageHandler
from voice_handler import VoiceHandler
from sticker_handler import StickerHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = '–≤–∞—à –∞–ø–∏'
FORGET_API_KEY = '–≤–∞—à –∞–ø–∏'
ASSEMBLYAI_API_KEY = '–≤–∞—à –∞–ø–∏'
CHANNEL_USERNAME = '–≤–∞—à —Ç–≥ –∫–∞–Ω–∞–ª, —Å–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –Ω—ë–º'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è GPT
GPT_TEMPERATURE = 1.1
GPT_MAX_TOKENS = 600
GPT_MODEL = "gpt-4o-mini"

client = OpenAI(
    api_key=FORGET_API_KEY,
    base_url="https://forgetapi.ru/v1"
)

class TimeManager:
    def __init__(self, db_manager):
        self.db = db_manager
        self.user_activities = {}

    def get_current_time(self):
        return datetime.now()

    def store_user_activity(self, user_id, activity_type, details=None):
        current_time = self.get_current_time()
        if user_id not in self.user_activities:
            self.user_activities[user_id] = []
        
        self.user_activities[user_id].append({
            'type': activity_type,
            'time': current_time,
            'details': details
        })

    def get_time_since_last_interaction(self, user_id, activity_type=None):
        if user_id not in self.user_activities:
            return None

        current_time = self.get_current_time()
        activities = self.user_activities[user_id]
        
        if activity_type:
            activities = [a for a in activities if a['type'] == activity_type]
        
        if not activities:
            return None
            
        last_activity = max(activities, key=lambda x: x['time'])
        time_diff = current_time - last_activity['time']
        return time_diff

    def extract_time_mentions(self, message):
        time_indicators = ['–ø–æ–π–¥—É', '—Å—Ö–æ–∂—É', '–∏–¥—É', '–ø–æ–π–¥—ë–º', '—Å–æ–±–∏—Ä–∞—é—Å—å']
        locations = ['–º–∞–≥–∞–∑–∏–Ω', '–∞–ø—Ç–µ–∫–∞', '—à–∫–æ–ª–∞', '—Ä–∞–±–æ—Ç–∞']
        
        message_lower = message.lower()
        
        for indicator in time_indicators:
            if indicator in message_lower:
                for location in locations:
                    if location in message_lower:
                        return {
                            'action': indicator,
                            'location': location,
                            'mentioned_time': self.get_current_time()
                        }
        return None

    def format_time_difference(self, time_diff):
        if not time_diff:
            return None
            
        minutes = time_diff.total_seconds() / 60
        hours = minutes / 60
        
        if minutes < 1:
            return "–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"
        elif minutes < 60:
            return f"{int(minutes)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        elif hours < 24:
            return f"{int(hours)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        else:
            days = int(hours / 24)
            return f"{days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"

class DatabaseManager:
    def __init__(self):
        self.conn = sqlite3.connect('chatbot.db', check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations (
            user_id INTEGER,
            message TEXT,
            timestamp DATETIME,
            role TEXT
        )''')
        self.conn.commit()

    def store_message(self, user_id, message, role='user'):
        cursor = self.conn.cursor()
        cursor.execute('''
        INSERT INTO conversations (user_id, message, timestamp, role)
        VALUES (?, ?, ?, ?)
        ''', (user_id, message, datetime.now(), role))
        self.conn.commit()

    def get_conversation_history(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('''
        SELECT message, role FROM conversations 
        WHERE user_id = ? 
        ORDER BY timestamp ASC
        ''', (user_id,))
        return cursor.fetchall()

    def clear_history(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM conversations WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

class ChatBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.mood_manager = MoodManager()
        self.voice_handler = VoiceHandler(ASSEMBLYAI_API_KEY)
        self.image_handler = ImageHandler(client, self.mood_manager, self.db, CHANNEL_USERNAME)
        self.sticker_handler = StickerHandler(client, self.mood_manager, self.db, CHANNEL_USERNAME)
        self.time_manager = TimeManager(self.db)

    async def check_subscription(self, user_id, bot):
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            print(f"Error checking subscription: {e}")
            return False

    def get_conversation_messages(self, user_id):
        history = self.db.get_conversation_history(user_id)
        system_prompt = self.mood_manager.get_system_prompt(user_id)
        
        last_user_time = self.time_manager.get_time_since_last_interaction(user_id, 'user_message')
        last_bot_time = self.time_manager.get_time_since_last_interaction(user_id, 'bot_message')
        
        time_context = f"""
        –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {self.time_manager.get_current_time().strftime('%H:%M %d.%m.%Y')}
        –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.time_manager.format_time_difference(last_user_time)}
        –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {self.time_manager.format_time_difference(last_bot_time)}
        """
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "system", "content": time_context}
        ]
        
        for msg, role in history:
            messages.append({"role": role, "content": msg})
        
        return messages

    async def handle_message(self, update, context):
        if update.channel_post:
            return

        try:
            user_id = update.effective_user.id
            user_message = update.message.text

            if not user_message:
                return

            self.time_manager.store_user_activity(user_id, 'user_message')
            
            time_mention = self.time_manager.extract_time_mentions(user_message)
            if time_mention:
                self.time_manager.store_user_activity(user_id, 'plan', time_mention)

            is_subscribed = await self.check_subscription(user_id, context.bot)
            if not is_subscribed:
                keyboard = [[KeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f"–•–µ–π~ –ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} üíô\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑!",
                    reply_markup=reply_markup
                )
                return

            if user_message.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å":
                return await self.clear_memory(update, context)

            sentiment_score = self.mood_manager.analyze_sentiment(user_message)
            self.mood_manager.update_mood(user_id, sentiment_score)

            self.db.store_message(user_id, user_message, 'user')
            messages = self.get_conversation_messages(user_id)

            try:
                response = client.chat.completions.create(
                    model=GPT_MODEL,
                    messages=messages,
                    max_tokens=GPT_MAX_TOKENS,
                    temperature=GPT_TEMPERATURE
                )
                bot_response = response.choices[0].message.content
                
                self.time_manager.store_user_activity(user_id, 'bot_message')
                self.db.store_message(user_id, bot_response, 'assistant')
                
                last_plan = None
                if user_id in self.time_manager.user_activities:
                    plans = [a for a in self.time_manager.user_activities[user_id] if a['type'] == 'plan']
                    if plans:
                        last_plan = plans[-1]

                time_context = ""
                if last_plan:
                    time_since_plan = datetime.now() - last_plan['details']['mentioned_time']
                    if time_since_plan.total_seconds() < 7200:
                        location = last_plan['details']['location']
                        time_context = f"\n\n–ö—Å—Ç–∞—Ç–∏, —Ç—ã –Ω–µ–¥–∞–≤–Ω–æ —É–ø–æ–º–∏–Ω–∞–ª(–∞) –æ –ø–æ—Ö–æ–¥–µ –≤ {location}. –ö–∞–∫ –≤—Å—ë –ø—Ä–æ—à–ª–æ?"

                keyboard = [[KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(bot_response + time_context, reply_markup=reply_markup)
                
            except Exception as e:
                print(f"Error in GPT response: {e}")
                await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?")
                
        except Exception as e:
            print(f"Error in message handling: {e}")
            if update.message:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    async def handle_sticker(self, update, context):
        await self.sticker_handler.handle_sticker(update, context)

    async def handle_channel_post(self, update, context):
        if update.channel_post and update.channel_post.chat.username == CHANNEL_USERNAME.replace('@', ''):
            print(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {update.channel_post.text}")
            return

    async def handle_photo(self, update, context):
        if update.channel_post:
            return
        await self.image_handler.handle_photo(update, context)

    async def start(self, update, context):
        if update.channel_post:
            return

        try:
            user_id = update.effective_user.id
            
            is_subscribed = await self.check_subscription(user_id, context.bot)
            if not is_subscribed:
                keyboard = [[KeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f"–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä–∏—è~ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} üíô\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start –µ—â–µ —Ä–∞–∑!",
                    reply_markup=reply_markup
                )
                return
            
            keyboard = [[KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            welcome_message = '–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä–∏—è, —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üíô\n\n–Ø —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç, –∏ –º–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—é—Ç—Å—è. –î–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º!'
            
            self.db.store_message(user_id, welcome_message, 'assistant')
            
            await update.message.reply_text(
                welcome_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"Error in start command: {e}")
            if update.message:
                await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")

    async def clear_memory(self, update, context):
        if update.channel_post:
            return

        try:
            user_id = update.effective_user.id
            
            is_subscribed = await self.check_subscription(user_id, context.bot)
            if not is_subscribed:
                keyboard = [[KeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f"–•–µ–π~ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} üíô",
                    reply_markup=reply_markup
                )
                return
            
            self.db.clear_history(user_id)
            self.mood_manager.set_initial_mood(user_id)
            await update.message.reply_text("–Ø –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–∞—à–µ–º –æ–±—â–µ–Ω–∏–∏! üíô")
        except Exception as e:
            print(f"Error in clearing memory: {e}")
            if update.message:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏...")

    async def handle_voice(self, update, context):
        if update.channel_post:
            return

        try:
            user_id = update.effective_user.id
            
            is_subscribed = await self.check_subscription(user_id, context.bot)
            if not is_subscribed:
                keyboard = [[KeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f"–•–µ–π~ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} üíô",
                    reply_markup=reply_markup
                )
                return
            
            voice = update.message.voice
            
            try:
                file = await context.bot.get_file(voice.file_id)
                voice_file = await file.download_as_bytearray()
                
                transcript = self.voice_handler.transcribe_audio(voice_file)
                
                if transcript:
                    await update.message.reply_text(f"–Ø —É—Å–ª—ã—à–∞–ª–∞: {transcript}")
                    
                    sentiment_score = self.mood_manager.analyze_sentiment(transcript)
                    self.mood_manager.update_mood(user_id, sentiment_score)
                    
                    self.db.store_message(user_id, transcript, 'user')
                    messages = self.get_conversation_messages(user_id)
                    
                    try:
                        response = client.chat.completions.create(
                            model=GPT_MODEL,
                            messages=messages,
                            max_tokens=GPT_MAX_TOKENS,
                            temperature=GPT_TEMPERATURE
                        )
                        bot_response = response.choices[0].message.content
                        self.db.store_message(user_id, bot_response, 'assistant')
                        
                        keyboard = [[KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")]]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        await update.message.reply_text(bot_response, reply_markup=reply_markup)
                    except Exception as e:
                        print(f"Error in GPT response for voice: {e}")
                        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                else:
                    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?")
                    
            except Exception as e:
                print(f"Error in voice processing: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                
        except Exception as e:
            print(f"Error in voice handling: {e}")
            if update.message:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    async def error_handler(self, update, context):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        print(f'Update {update} caused error {context.error}')
        
        if update and update.effective_message and not update.channel_post:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )

    def __del__(self):
        try:
            self.db.close()
        except:
            pass

def main():
    try:
        print("Starting bot...")
        bot = ChatBot()
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        application.add_handler(CommandHandler("start", bot.start))
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_filter = (
            filters.TEXT & 
            ~filters.COMMAND & 
            filters.ChatType.PRIVATE
        )
        application.add_handler(MessageHandler(text_filter, bot.handle_message))
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        voice_filter = filters.VOICE & filters.ChatType.PRIVATE
        application.add_handler(MessageHandler(voice_filter, bot.handle_voice))
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photo_filter = filters.PHOTO & filters.ChatType.PRIVATE
        application.add_handler(MessageHandler(photo_filter, bot.handle_photo))
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        sticker_filter = filters.Sticker.ALL & filters.ChatType.PRIVATE
        application.add_handler(MessageHandler(sticker_filter, bot.handle_sticker))
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
        channel_filter = filters.ChatType.CHANNEL
        application.add_handler(MessageHandler(channel_filter, bot.handle_channel_post))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(bot.error_handler)

        print("Bot is running...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        print(f"Critical error in main: {e}")

if __name__ == '__main__':
    main()