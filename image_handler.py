import base64
from datetime import datetime
import asyncio
from telegram import KeyboardButton, ReplyKeyboardMarkup
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class ImageHandler:
    def __init__(self, openai_client, mood_manager, db_manager, channel_username):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        self.client = openai_client
        self.mood_manager = mood_manager
        self.db = db_manager
        self.channel_username = channel_username
        # GPT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.GPT_MODEL = "gpt-4o-mini"
        self.GPT_MAX_TOKENS = 600
        self.GPT_TEMPERATURE = 1.1

    def _is_inappropriate_content(self, response):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ GPT –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        markers = [
            "–∏–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–ø–∏—Å—ã–≤–∞—Ç—å",
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä–∏—Ç—å",
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ",
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É —ç—Ç–æ –æ–±—Å—É–¥–∏—Ç—å",
            
        ]
        return any(marker.lower() in response.lower() for marker in markers)

    async def _generate_playful_response(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é GPT
        """
        try:
            messages = [
                {"role": "system", "content": "–¢—ã –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–∏–≤—ã–µ, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ '–±–æ–∂–µ –∫–∞–∫ –º–∏–ª–æ, —è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ—Ç–µ–∫–ª–∞ –ø—É–ø—Å–∏–∫, –æ—á–µ–Ω—å –≤–æ–∑–±—É–∂–¥–∞–µ—Ç. –£ –º–µ–Ω—è –ø–∏—Å—è –≥–æ—Ä–∏—Ç!', –Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ-—Ä–∞–∑–Ω–æ–º—É. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ –≤–∫–ª—é—á–∞—Ç—å —ç–º–æ–¥–∑–∏."},
                {"role": "user", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–≥—Ä–∏–≤—ã–π –æ—Ç–≤–µ—Ç"}
            ]
            
            response = self.client.chat.completions.create(
                model=self.GPT_MODEL,
                messages=messages,
                max_tokens=100,
                temperature=2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º temperature –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            )
            
            return response.choices[0].message.content
        except Exception as e:
            print(f"Error generating playful response: {e}")
            return "–û–π, –∫–∞–∫–∞—è –ø—Ä–µ–ª–µ—Å—Ç—å! –¢—ã —Ç–∞–∫–æ–π –∑–∞–±–∞–≤–Ω—ã–π üíï"  # Fallback –æ—Ç–≤–µ—Ç

    async def handle_photo(self, update, context):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = await self._check_subscription(context.bot, user_id)
            if not is_subscribed:
                keyboard = [[KeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {self.channel_username}")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f"–•–µ–π~ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {self.channel_username} üíô",
                    reply_markup=reply_markup
                )
                return

            media_group_id = update.message.media_group_id
            
            if media_group_id:
                await self._handle_media_group(update, context, user_id, media_group_id)
            else:
                await self._handle_single_photo(update, context, user_id)
                
        except Exception as e:
            print(f"Error in photo handling: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

    async def _check_subscription(self, bot, user_id):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
        """
        try:
            member = await bot.get_chat_member(chat_id=self.channel_username, user_id=user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            print(f"Error checking subscription: {e}")
            return False

    async def _handle_single_photo(self, update, context, user_id):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        """
        try:
            photo = update.message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)
            photo_bytes = await photo_file.download_as_bytearray()
            base64_image = base64.b64encode(photo_bytes).decode('utf-8')
            
            caption = update.message.caption if update.message.caption else "–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —É—á–∏—Ç—ã–≤–∞—è —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
            
            response = await self._get_image_response(user_id, caption, [base64_image])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if self._is_inappropriate_content(response):
                response = await self._generate_playful_response()
            
            keyboard = [[KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(response, reply_markup=reply_markup)
            
        except Exception as e:
            print(f"Error in single photo handling: {e}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")

    async def _handle_media_group(self, update, context, user_id, media_group_id):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        try:
            if f'media_group_{media_group_id}' not in context.bot_data:
                context.bot_data[f'media_group_{media_group_id}'] = {
                    'images': [],
                    'timestamp': datetime.now(),
                    'processed': False
                }
            
            photo = update.message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)
            photo_bytes = await photo_file.download_as_bytearray()
            base64_image = base64.b64encode(photo_bytes).decode('utf-8')
            
            context.bot_data[f'media_group_{media_group_id}']['images'].append(base64_image)
            
            await asyncio.sleep(0.5)
            
            current_time = datetime.now()
            group_time = context.bot_data[f'media_group_{media_group_id}']['timestamp']
            time_passed = (current_time - group_time).total_seconds()
            
            if time_passed >= 0.5 and not context.bot_data[f'media_group_{media_group_id}']['processed']:
                context.bot_data[f'media_group_{media_group_id}']['processed'] = True
                
                images = context.bot_data[f'media_group_{media_group_id}']['images']
                caption = update.message.caption if update.message.caption else "–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, —É—á–∏—Ç—ã–≤–∞—è —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
                
                response = await self._get_image_response(user_id, caption, images)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                if self._is_inappropriate_content(response):
                    response = await self._generate_playful_response()
                
                keyboard = [[KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(response, reply_markup=reply_markup)
                
                del context.bot_data[f'media_group_{media_group_id}']
                
        except Exception as e:
            print(f"Error in media group handling: {e}")
            if f'media_group_{media_group_id}' in context.bot_data:
                del context.bot_data[f'media_group_{media_group_id}']
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")

    async def _get_image_response(self, user_id, text, images):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)
        """
        try:
            system_prompt = self.mood_manager.get_system_prompt(user_id)
            history = self.db.get_conversation_history(user_id)
            
            messages = [{"role": "system", "content": system_prompt}]
            for msg, role in history:
                messages.append({"role": role, "content": msg})
            
            content = [{"type": "text", "text": text}]
            for image in images:
                content.append({
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image}"
                    }
                })
            
            messages.append({"role": "user", "content": content})
            
            response = self.client.chat.completions.create(
                model=self.GPT_MODEL,
                messages=messages,
                max_tokens=self.GPT_MAX_TOKENS,
                temperature=self.GPT_TEMPERATURE
            )
            
            bot_response = response.choices[0].message.content
            
            sentiment_score = self.mood_manager.analyze_sentiment(text)
            self.mood_manager.update_mood(user_id, sentiment_score)
            
            self.db.store_message(user_id, text, 'user')
            self.db.store_message(user_id, bot_response, 'assistant')
            
            return bot_response
            
        except Exception as e:
            print(f"Error in getting GPT response: {e}")
            return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."